join(", ", ["app", "db", "proxy"])
# => "app, db, proxy"

split("-", "db-01-prod")
# => ["db", "01", "prod"]

replace("v1.2.3", ".", "-")
# => "v1-2-3"

format("web-%02d", 1)
# => "web-01"


üî§ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
üéØ –ò–º—è —Ä–µ—Å—É—Ä—Å–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –æ–∫—Ä—É–∂–µ–Ω–∏—é

locals {
  env  = "prod"
  name = "backend"
}

output "full_name" {
  value = format("%s-%s", local.name, local.env)
  # => "backend-prod"
}

üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É

locals {
  env  = "stage"
  name = "backend"
}

output "config_path" {
  value = format("/etc/%s/%s.conf", local.env, local.name)
  # => "/etc/stage/backend.conf"
}

üéØ –ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –≤–µ—Ä—Å–∏–∏

locals {
  version_raw = "v1.2.3"
}

output "version_safe" {
  value = replace(local.version_raw, ".", "-")
  # => "v1-2-3"
}

üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ Docker-–æ–±—Ä–∞–∑–∞

locals {
  project    = "myapp"
  env        = "dev"
  version    = "1.0.5"
  image_name = format("registry.local/%s/%s:%s", local.env, local.project, replace(local.version, ".", "-"))
}

output "docker_image" {
  value = local.image_name
  # => "registry.local/dev/myapp:1-0-5"
}

üìã

##################################################

length(["a", "b", "c"])
# => 3

tolist(set("a", "b"))
# => ["a", "b"]

flatten([["a"], ["b", "c"]])
# => ["a", "b", "c"]

concat(["x"], ["y", "z"])
# => ["x", "y", "z"]

üéØ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É

locals {
  ips = ["10.0.0.1", "10.0.0.2", "10.0.0.3"]
}

output "ip_list" {
  value = join(", ", local.ips)
  # => "10.0.0.1, 10.0.0.2, 10.0.0.3"
}

üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è IP-–∞–¥—Ä–µ—Å–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º count)

resource "proxmox_lxc" "vm" {
  count    = 3
  hostname = format("app-%02d", count.index + 1)
  ip       = format("192.168.22.%d/24", count.index + 10)
  ...
}

üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ flatten

locals {
  nested = [["a"], ["b", "c"]]
  flat   = flatten(local.nested)
}

output "flat_result" {
  value = local.flat
  # => ["a", "b", "c"]
}

##################################################



1    –°–æ–∑–¥–∞–π locals —Å –¥–∞–Ω–Ω—ã–º–∏:

locals {
  names = ["frontend", "backend", "db"]
  env   = "prod"
}

2    –°—Ñ–æ—Ä–º–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏—è:

locals {
  full_names = [for name in local.names : format("%s-%s", name, local.env)]
}

3    –û–±—ä–µ–¥–∏–Ω–∏ –∏—Ö –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É:

output "joined_names" {
  value = join(", ", local.full_names)
}


########################################################

map

–ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –∫–ª—é—á–∞–º–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞.

variable "region_images" {
  type = map(string)
  default = {
    ru-central = "image-1"
    eu-west    = "image-2"
  }
}

object

–ù–∞–±–æ—Ä –ø–æ–ª–µ–π —Å –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏.

variable "vm_config" {
  type = object({
    cpu    = number
    memory = number
    name   = string
  })
}

merge(map1, map2, ...)

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ map –≤ –æ–¥–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–≤—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ).

locals {
  base = {
    cpu = 2
    disk = 20
  }

  override = {
    disk = 40
  }

  final = merge(local.base, local.override)
  # => { cpu = 2, disk = 40 }
}

########################################################

üß© –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
üéØ –ü—Ä–∏–º–µ—Ä 1: –ø–µ—Ä–µ–¥–∞—á–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –º–æ–¥—É–ª—å

module "vm" {
  source = "./modules/lxc"
  config = {
    name   = "web-01"
    memory = 1024
    cores  = 2
  }
}

üéØ –ü—Ä–∏–º–µ—Ä 2: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ —Å—Ä–µ–¥–∞–º

locals {
  default = {
    cores = 2
    swap  = 256
  }
  prod = {
    memory = 2048
    swap   = 512
  }

  final_config = merge(local.default, local.prod)
  # => { cores = 2, memory = 2048, swap = 512 }
}

üéØ –ü—Ä–∏–º–µ—Ä 3: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ map –≤ for_each

variable "containers" {
  default = {
    app1 = { ip = "192.168.22.10", role = "web" },
    app2 = { ip = "192.168.22.11", role = "db"  }
  }
}

resource "proxmox_lxc" "ct" {
  for_each = var.containers

  hostname = each.key
  ip       = each.value.ip
  ...
}

########################################################


